
#ifndef cheddar_generated__helpersh_h
#define cheddar_generated__helpersh_h

/**
 * This file was automatically generated by rusty-cheddar.
 * It would probably be wise not to mess with it.
 */


#ifdef __cplusplus
extern "C" {
#endif



#include <stdlib.h>
#include <inttypes.h>
/* DO NOT EDIT THIS FILE. */





#ifdef __cplusplus
}
#endif


#endif

#ifndef cheddar_generated__helpers_binaryh_h
#define cheddar_generated__helpers_binaryh_h

/**
 * This file was automatically generated by rusty-cheddar.
 * It would probably be wise not to mess with it.
 */


#ifdef __cplusplus
extern "C" {
#endif



#include <stdlib.h>
#include <inttypes.h>
/* DO NOT EDIT THIS FILE. */



typedef struct EmbFile_ EmbFile_;

struct EmbFile_ {
	FILE* file;
};

uint8_t binaryReadByte(EmbFile_* file);

int32_t binaryReadBytes(EmbFile_* file, uint8_t* destination, int32_t count);

int16_t binaryReadInt16(EmbFile_* file);

int32_t binaryReadInt32(EmbFile_* file);

uint8_t binaryReadUInt8(EmbFile_* file);

uint16_t binaryReadUInt16(EmbFile_* file);

uint32_t binaryReadUInt32(EmbFile_* file);

int16_t binaryReadInt16BE(EmbFile_* file);

uint16_t binaryReadUInt16BE(EmbFile_* file);

int32_t binaryReadInt32BE(EmbFile_* file);

uint32_t binaryReadUInt32BE(EmbFile_* file);

void binaryReadString(EmbFile_* file, uint8_t* buffer, int32_t maxLength);

void binaryReadUnicodeString(EmbFile_* file, uint8_t* buffer, int32_t stringLength);

float binaryReadFloat(EmbFile_* file);

void binaryWriteByte(EmbFile_* file, uint8_t data);

void binaryWriteBytes(EmbFile_* file, uint8_t const* data, int32_t size);

void binaryWriteShort(EmbFile_* file, int16_t data);

void binaryWriteShortBE(EmbFile_* file, int16_t data);

void binaryWriteUShort(EmbFile_* file, uint16_t data);

void binaryWriteUShortBE(EmbFile_* file, uint16_t data);

void binaryWriteInt(EmbFile_* file, int32_t data);

void binaryWriteIntBE(EmbFile_* file, int32_t data);

void binaryWriteUInt(EmbFile_* file, uint32_t data);

void binaryWriteUIntBE(EmbFile_* file, uint32_t data);

void binaryWriteFloat(EmbFile_* file, float data);



#ifdef __cplusplus
}
#endif


#endif

#ifndef cheddar_generated__patternh_h
#define cheddar_generated__patternh_h

/**
 * This file was automatically generated by rusty-cheddar.
 * It would probably be wise not to mess with it.
 */


#ifdef __cplusplus
extern "C" {
#endif



#include <stdlib.h>
#include <inttypes.h>
/* DO NOT EDIT THIS FILE. */





#ifdef __cplusplus
}
#endif


#endif

#ifndef cheddar_generated__pattern_colorh_h
#define cheddar_generated__pattern_colorh_h

/**
 * This file was automatically generated by rusty-cheddar.
 * It would probably be wise not to mess with it.
 */


#ifdef __cplusplus
extern "C" {
#endif



#include <stdlib.h>
#include <inttypes.h>
/* DO NOT EDIT THIS FILE. */



typedef struct EmbColor EmbColor;

struct EmbColor {
	uint8_t r;
	uint8_t g;
	uint8_t b;
};

EmbColor embColor_make(uint8_t r, uint8_t g, uint8_t b);

EmbColor* embColor_create(uint8_t r, uint8_t g, uint8_t b);

EmbColor embColor_fromHexStr(char const* val);



#ifdef __cplusplus
}
#endif


#endif

#ifndef cheddar_generated__pattern_arch_h
#define cheddar_generated__pattern_arch_h

/**
 * This file was automatically generated by rusty-cheddar.
 * It would probably be wise not to mess with it.
 */


#ifdef __cplusplus
extern "C" {
#endif



#include <stdlib.h>
#include <inttypes.h>
/* DO NOT EDIT THIS FILE. */



typedef struct EmbArc EmbArc;

struct EmbArc {
	double startX;
	double startY;
	double midX;
	double midY;
	double endX;
	double endY;
};

typedef struct EmbArcObject EmbArcObject;

struct EmbArcObject {
	EmbArc arc;
	int32_t lineType;
	EmbColor color;
};

EmbArcObject embArcObject_make(double sx, double sy, double mx, double my, double ex, double ey);

EmbArcObject* embArcObject_create(double sx, double sy, double mx, double my, double ex, double ey);

typedef struct EmbArcObjectList EmbArcObjectList;

struct EmbArcObjectList {
	EmbArcObject arcObj;
	EmbArcObjectList* next;
};

EmbArcObjectList* embArcObjectList_add(EmbArcObjectList* pointer, EmbArcObject data);

int32_t embArcObjectList_count(EmbArcObjectList* pointer);

int32_t embArcObjectList_empty(EmbArcObjectList* pointer);

void embArcObjectList_free(EmbArcObjectList* pointer);



#ifdef __cplusplus
}
#endif


#endif
